<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://midhunkrishna.in/posts/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Mar 2019 14:04:15 +0530</lastBuildDate>
    
	<atom:link href="http://midhunkrishna.in/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>maintaining multiple database versions</title>
      <link>http://midhunkrishna.in/posts/2019/03/maintaining-multiple-database-versions/</link>
      <pubDate>Sat, 09 Mar 2019 14:04:15 +0530</pubDate>
      
      <guid>http://midhunkrishna.in/posts/2019/03/maintaining-multiple-database-versions/</guid>
      <description>Introduction: Rainbows and Unicorns. As a web dev, I interact with a lot of tools that help me convert coffee (these days I have switched over to tea) to code, and for the most part, different versions of the same tools in my toolbelt co-exist as they have their version-managers. The real power of the version managers become apparent whenever I move from one project to another, The Next Amazon project is using Ruby 2.</description>
    </item>
    
    <item>
      <title>private class methods in ruby</title>
      <link>http://midhunkrishna.in/posts/2017/10/private-class-methods-in-ruby/</link>
      <pubDate>Wed, 18 Oct 2017 23:49:34 +0530</pubDate>
      
      <guid>http://midhunkrishna.in/posts/2017/10/private-class-methods-in-ruby/</guid>
      <description>A while back, the CTO of my client company assigned me a ticket, which was to fix a bug that has been plaguing their systems for a while. It turned out to be a bug in the custom serializer they had, which would serialize and deserialize data sent between their microservices.
This serializer was small enough to be written in a single class and had two or three methods which did all the heavy lifting and obviously were fat.</description>
    </item>
    
    <item>
      <title>working with concurrent ruby</title>
      <link>http://midhunkrishna.in/posts/2017/09/working-with-concurrent-ruby/</link>
      <pubDate>Thu, 21 Sep 2017 14:21:14 +0530</pubDate>
      
      <guid>http://midhunkrishna.in/posts/2017/09/working-with-concurrent-ruby/</guid>
      <description>Most of us have worked on legacy/inherited code bases and sometimes we are assigned that exhilarating task of hunting down that performance issue which is causing worker threads to be killed, users to get pissed off and the support team to repent for their past sins.
The dreaded shipment uploader Being a TMS (Transportation Management System), our system dealt with Deliveries, and Shipments. The shipment uploader endpoint allowed the shipping companies to upload a csv which imported these shipments, grouped them into deliveries and calculated the projected cost of shipping these from their origin to destination and showed these values on the uploader UI itself.</description>
    </item>
    
    <item>
      <title>ctes and window functions</title>
      <link>http://midhunkrishna.in/posts/2017/08/ctes-and-window-functions/</link>
      <pubDate>Mon, 14 Aug 2017 15:31:25 +0530</pubDate>
      
      <guid>http://midhunkrishna.in/posts/2017/08/ctes-and-window-functions/</guid>
      <description>I am a big fan of code readability, but being a fan and expecting the code I write to be readable are two different things. Readable code is easier to understand and much more straightforward to grasp. One significant difference I find while comparing readable and unreadable code, apart from the obvious, is how many different variables I have to hold in my head at a time while I try to grapple my head around it.</description>
    </item>
    
  </channel>
</rss>